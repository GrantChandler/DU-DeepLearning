
# DO NOT EDIT THIS FILE - GENERATED FROM 02_ts_utils.ipynb

import pandas as pd
from sklearn.impute import SimpleImputer
from sklearn.preprocessing import MinMaxScaler, StandardScaler, OneHotEncoder
from sklearn.compose import ColumnTransformer
import pickle

'''
    Utility that is derived from Column transformer to do inverse_transform
'''
class myColumnTransformer(ColumnTransformer):
    def out_feature_names(self):
        out_feats = []
        for s,v in self.named_transformers_.items():
            out_feats.extend(v.get_feature_names_out())
        return  out_feats

    def inverse_transform(self, sdf, inplace=False):
        ret = df if (inplace) else pd.DataFrame()

        for s,v in self.named_transformers_.items():
            if (not hasattr(v, "inverse_transform")):
                continue;
            
            fo = v.get_feature_names_out()
            #print(f"Inverting {fo} => {v.feature_names_in_} {set(fo).issubset(sdf.columns)} ")
            if (not set(fo).issubset(sdf.columns)):
                continue;
            ret[v.feature_names_in_] = v.inverse_transform(sdf[fo])

        return ret

    def save(self, file="my", ext=".scaler.pkl"):
        pickle.dump(self, open(f'{file}.scaler.pkl', 'wb'))

    def load(self, file="my", ext=".scaler.pkl"):
        ret = pickle.load( open(f'{file}.scaler.pkl', 'rb'))
        return ret

def find_cat_numerics_names(df, num_unique=5):
    unique = df.nunique()
    numerics = unique[unique  >  num_unique].index.to_list()
    categori = unique[unique <= num_unique].index.to_list()

    return numerics, categori

def scale_df(df, num_unique=5, numericScaler= StandardScaler):
    numerics, categorical = find_cat_numerics_names(df, num_unique)

    scaler = myColumnTransformer( transformers= 
            [(n  ,  numericScaler(), [n] ) for n in numerics] +
            [("categorical",  OneHotEncoder(sparse=False, handle_unknown="ignore"), categorical)]
        , remainder='passthrough')

    x = scaler.fit_transform(df)
    return scaler, pd.DataFrame(x, columns= scaler.out_feature_names())

def testCT():
    df = pd
#df_scaled_trn = df
#ds = tf.data.Dataset.from_tensor_slices(df_scaled_trn[df_scaled_trn.columns[:4]])
#df
# #
